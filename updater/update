#!/bin/sh

# arg1: update (prompt for pkg versions) | checksum (run checksum) | check (run build)
# arg2: path to repo
# Reads output of kiss-outdated for the passed repo from stdin

set -eu

BASEDIR="${0%/*}"
UPDATED="$BASEDIR/updated"

prompt() {
	i=0

	for item; do
		echo "$i: $item" >&2
		: $((i+=1))
	done

	read -r choice < /dev/tty || return 1
	seq="$(seq "$choice" 2>/dev/null)" || {
		printf '%s\n' "Invalid choice, enter new version string" >&2

		read -r choice < /dev/tty || return 1

		echo "$choice"
		return
	}

	for _ in $seq; do
		shift
	done

	echo "$1"
}

update() {
	repo="$1"

	while read -r pkg _ _ new_vers; do
		[ -d "$repo/$pkg" ] || continue
		[ "$new_vers" ] || continue

		{ IFS=", "; set -- $new_vers; unset IFS; }

		read -r old_ver _ < "$repo/$pkg/version"

		printf '\n%s\n\n' "Updating $pkg ($old_ver)"

		final="$(prompt "$@")" || {
			printf '\n%s\n' "Selection cancelled for $pkg" >&2
			continue
		}

		cp -R "$repo/$pkg" "$UPDATED/$pkg"

		echo "$final 1" > "$UPDATED/$pkg/version"
		sed "s|$old_ver|$final|g" "$UPDATED/$pkg/sources" > _

		mv -f _ "$UPDATED/$pkg/sources"
	done
}

checksum() {
	for pkg in *; do
		(
			cd "$pkg"
			kiss checksum
		)
	done
}

check() {
	for pkg in *; do
		(
			cd "$pkg"
			pkg="${PWD%/*}"

			[ -f "../.$pkg.success" ] && return

			KISS_PROMPT=0 kiss build
			:> "$UPDATED/.$pkg.success"
		)
	done
}

if [ "$1" = "update" ]; then
	rm -rf "$UPDATED"
	mkdir -p "$UPDATED"

	update "$2"
elif [ "$1" = "checksum" ]; then
	cd "$UPDATED"

	checksum
elif [ "$1" = "check" ]; then
	cd "$UPDATED"

	check
fi
